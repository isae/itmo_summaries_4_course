Функциональное программирование. Арсений Серока.

Фишки:
* чистота - если на вход функции приходит одно и то же, то и на выходе будет одно и то же
* отсутствуют базовые примитивы (например цикл for)
* ленивость: minima k xs = take k (sort xs) - отсортирует ровно столько элементов, чтобы нужно было взять k
* легче тестировать (т.к. одна часть кода не портит другую)
* весело и больно, заставляет думать
* много теоретических, математических вещей в основе языка
* если код скомпилировался - скорее всего будет работать

Классный автоматический вывод типов. 
Cabal - build-менеджер, умеет тянуть зависимости. Есть проблемы, связанные с версиями пакетов. 
Nix - пакетный менеджер для haskell, python, rust и вообще практически чего угодно. Функциональный. На самом деле - 
язык программирования. Как Cabal, но более мощный.
Community
Имеет смысл читать исходники библиотек
Haskell часто используют в высоконгруженных вычислениях, т.к. многопоточность нахаляву( из-за иммутабельности)
Hugs - еще один компилятор, не поддерживает последнюю версию
Hackage - глобальный репозиторий хаскеллевских библиотек. 
Hoogle - по сигнатуре функции выдает все функции, которые подходят под этот тип. 
IDE - нормальным пацаны юзают vim. 

Lisp -> ML -> OcaML -> Haskell98 -> Haskell2010;
Известные проекты: 
Haxl(Facebook) - умеет объединять запросы к базе и кешировать ответы и таким образом уменьшать загрузку на БД.
PanDoc - конвертер текстовых файлов из всего во все
XMonad - тайлинговый оконный менеджер
ParSec - генератор парсеров. 
.hs
ICFP - задачи. можно порешать.

Названия модулей с большой буквы

______________
Лекция 2.
Сериализация и десериализация почти забесплатно (deriving Show, Read);
Пример про карты на википедии
(G) any
(++) - оператор конкатенации строк
[] ++ []
если написать функцию в кавычках, то eleme el [] равно el `elem` []
String == [Char]

fibs = 1:1:zipWith (+) fibs (tail fibs) - фибоначчи. здесь (+) передается как функция
zipWith - объединяет два списка
tail - все кроме первого элемента
point-free нотация (G)
pattern-matching (G)
. - композиция функций
(G) свертка
Сумма элементов списка: sum = foldr (+) 0
