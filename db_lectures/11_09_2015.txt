Георгий Корнеев. Базы данных. Лекция 2.
Моделирование баз данных.

Одно из основных требований к БД - чтобы туда можно было записывать данные с определенными ограничениями - меньше ошибок. 

Рассмотрим, какие ограничения можно накладывать на базу данных.

Два типа моделей:
* физическая (как представлены данные, императивное представление)
* концептуальная (промежуточная, диаграммы сущность-связь) - легко строится по человеческому описанию, легко видятся недостаточно проработанные места. Из нее легче получить достаточно хорошую физическую модель.

Состав физической модели:
	таблицы
	ссылки между таблицами
	доп. элементы:
		представления (views) - некоторые выборки из нескольких таблиц
		хранимые процедуры
		триггеры (процедура, исполняемая при определенном условии)

Таблица - набор записей
	Запись - строка
	Колонка - поле (аттрибут). Колонки типизированные.
	NULL - нетипизированый

Ключ - набор полей, идентифицирующих запись
	простой - из одного поля
	составной - из нескольких
! нельзя по конкретному наполнению базы данных понять, какое поле является ключом, но можно понять, что не является.
Серия, номер пасспорта - типичный пример составного ключа.
Типы ключей:
	естественный (пришел из реального мира)
	суррогатный (просто решили сделать поле ключом)
Часто имеет смысл ввести суррогатный ключ из соображений перфоманса. 
+ естественные ключи могут меняться и это плохо (поэтому их рекомендуется не использовать - вплоть до запрета)
Ключей может быть несколько. Обычно несколько естественных и один суррогатный.
По приоритету:
	основные (primary)
	вспомогательные (secondary)

Ссылка - значение поля содержится в ключе другой таблицы. 
// обычно если ссылка не на ключ, то это проблема в дизайне базы
	внешний ключ (FOREIGN KEY)
	простой
	составной
Ссылки бывают на саму таблицу (пример с подкатегориями).

Графическая нотация таблиц:
название	тип 	свойства
id			:int	"M" "PK"
Название колонки должно быть уникальное.
	M - mandatory, not null
	O - optional, nullable
	PK - primary key
	Kn (K1, ...) - остальные ключи

Ссылки обозначаются стрелками, у ссылки указывается имя (для понимания),
указывается ключ, который ссылается. На который ссылаемся - не указываем, т.к. подразумевается что на primary.
Пример: StudentGroup "FK1"

Модель сущность-связь:
	Сущность - имя, аттрибуты (имя, домен) - квадратик
		Домен(тип аттрибута) может быть составным. Можем сказать, что два поля могут быть похожий тип.  При преобразовании сопоставляем домену физический тип.
	Связь - имя, связываемые сущности и их роли, тип связи - стрелочка
		1to*
		1to1
		*to1
		*to*
	Ассоциации - обобщенная связь - овальчик
		нагруженная (имеет доп. информацию)
		многосторонняя
Как выбрать:
	простая и ненагруженная - связь
	можно идентифицировать - сущность
	иначе - ассоциация
Два вида ограничений:
	Ограничения по Чену:
		зафиксировав несколько сущностей, можно увидеть, какие ограничения
	
	Ограничения по Мерис:
		ограничение непосредственно на сущность. 
	При проектировании базы нужно понмиать, какой тип ограничений.
	Разница только в стороне связей (с какой стороны посмотреть). Если есть 
	тройные ассоциации - то их не всегда можно выразить в определенной парадигме.

	Обобщенные ограничения - гораздо реже (при фиксировании определенного множества сущностей, имеем определенную связь)
	Для связей: Чен = Мерис = Обобщенные
	Для 3-ассоциаций: Чен < Мерис = Обобщеные
	для больших - только обобщенные

Слабая сущность - недостаточно атрибутов для идентификации( например, группа, у которой есть только имя).
В таком случае в ключ может входить связь с другой сущностью (например связть университет - группа).

Различные нотации:
	нотация Питера Чена (разработал модель сущность-связь)
	UML - нотация - все пользуются

Зачем нужны все эти пляски? Можно рисовать такие диаграммы просто по описанию реального мира.

Затем можно преобразовать диаграмму в БД:
	меняем все связи на ассоциации  	
	преобразуем ассоциации в слабые сущности
	сущности - в таблицы, домены в типы, составные аттрибуты - в наборы столбцов
	связи - в дополнительные аттрибуты
		многие к одному - со стороны много
		один к одному - со стороны обязательного
Второй вариант - преобразовывать каждую отдельную штуку саму по себе
!идентифицирующая связь не может быть множественной		

Ассоциации преобразуются в отдельные таблички только в случае, если они *to*  с двух сторон, или они мультисторонние. В противном случае, поле может втянуться в одну из табличек.

Для всего этого нужен язык - DDL, data definition language. 
	create table имя (описание) опция ;
	drop table
	alter table

Create:
	create table persons (id int, name varchar(50));
	Описание:
		столбца
			имя
			тип
				символы
					char - символ
					char(n) -  строка 
					varchar(n) - строка переменной длины
					nchar - многоязычные
				числа
					numeric(длина) - целое произвольной точности
					decimal(длина,точность) - с фиксированной точкойt
					bit, int - целые
					float, double - с плавающей точкой
				дата и время
					date
					time?+zone
					timestamp, datetime - дата+ время
				данные неизвестного размера
					blob - двоичные
					clob - символьные
			nullability - по умолчанию nullable
			default value - по умолчанию null, может быть константа или что-то сложнее
			autoincrement - не стандартизирован, удобно для суррогатных ключей
		ключей
			(constraint имя)? primary key (столбцы+)
				primary key (id)
				constraint person_pk unique key(id)
			unique
			foreign: foreign key (столбцы+) references таблица (столбцы+)
		ссылок
Drop:
	все удаляет
Alter:
	add column
	add constraint
	change (alter)
______________________
Итоги:
	диаграммы сущность-связь по словесному описанию
	физические диаграммы по UML
	база данных из физических диаграмм с пом. DDL


CREATE DATABASE ctd ENCODING 'UTF-8' LC_COLLATE 'ru_RU.UTF-8' LC_CTYPE 'ru_RU.UTF-8' TEMPLATE template0;











































